package TreePackage;/* A class that implements a decision tree by extending BinaryTree. COMPSCI 105 Assignment 2 - Part 2 Name:  UPI:  */public class DecisionTree<T> extends BinaryTree<T> implements		DecisionTreeInterface<T> {	private BinaryNodeInterface<T> currentNode;	public DecisionTree() {		super();		currentNode = null;	} // end default constructor	public DecisionTree(T rootData) {		super(rootData);		currentNode = getRootNode();	} // end constructor	public DecisionTree(T rootData, DecisionTree<T> leftTree,			DecisionTree<T> rightTree) {		super(rootData, leftTree, rightTree);		currentNode = getRootNode();	} // end constructor	public void reset() {		currentNode = getRootNode();	} // end reset	public T getCurrentData() {		if (currentNode != null)			return currentNode.getData();		else			return null;	} // end getCurrentData	public void setCurrentData(T newData) {		currentNode.setData(newData);	} // end setCurrentData	public void setAnswers(T answerForNo, T answerForYes) {		if (currentNode.hasLeftChild()) {			BinaryNodeInterface<T> leftChild = currentNode.getLeftChild();			leftChild.setData(answerForNo);		} else {			BinaryNodeInterface<T> newLeftChild = new BinaryNode<T>(answerForNo);			currentNode.setLeftChild(newLeftChild);		} // end if		if (currentNode.hasRightChild()) {			BinaryNodeInterface<T> rightChild = currentNode.getRightChild();			rightChild.setData(answerForYes);		} else {			BinaryNodeInterface<T> newRightChild = new BinaryNode<T>(answerForYes);			currentNode.setRightChild(newRightChild);		}		/**************		 * Task 1 Implement in a manner similar to setting a Yes answer		 */	} // end setAnswers	public boolean isAnswer() {		if (currentNode != null)			return currentNode.isLeaf();		else			return false;	} // end isAnswer	public void advanceToNo() {		currentNode = currentNode.getLeftChild();	} // end advanceToNo	public void advanceToYes() {		currentNode = currentNode.getRightChild();	} // end advanceToYes	protected BinaryNodeInterface<T> getCurrentNode() {		return currentNode;	} // end getCurrentNode} // end DecisionTree