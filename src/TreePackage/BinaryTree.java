package TreePackage;import java.util.Iterator;import java.util.NoSuchElementException;/*   A class that implements the ADT binary tree.    COMPSCI 105	Assignment 2 - Part 2	Name: 	UPI: */public class BinaryTree<T> implements BinaryTreeInterface<T>{   private BinaryNodeInterface<T> root;   public BinaryTree()   {      root = null;   } // end default constructor   public BinaryTree(T rootData)   {      root = new BinaryNode<T>(rootData);   } // end constructor   public BinaryTree(T rootData, BinaryTree<T> leftTree,                                  BinaryTree<T> rightTree)   {      privateSetTree(rootData, leftTree, rightTree);   } // end constructor   public void setTree(T rootData)   {      root = new BinaryNode<T>(rootData);   } // end setTree   public void setTree(T rootData, BinaryTreeInterface<T> leftTree,                                   BinaryTreeInterface<T> rightTree)   {      privateSetTree(rootData, (BinaryTree<T>)leftTree,                                (BinaryTree<T>)rightTree);   } // end setTree	private void privateSetTree(T rootData, BinaryTree<T> leftTree, 	                                        BinaryTree<T> rightTree)	{      root = new BinaryNode<T>(rootData);      if ((leftTree != null) && !leftTree.isEmpty())         root.setLeftChild(leftTree.root);             if ((rightTree != null) && !rightTree.isEmpty())      {         if (rightTree != leftTree)            root.setRightChild(rightTree.root);         else            root.setRightChild(rightTree.root.copy());      } // end if      if ((leftTree != null) && (leftTree != this))         leftTree.clear();              if ((rightTree != null) && (rightTree != this))         rightTree.clear();	} // end privateSetTree	private BinaryNode<T> copyNodes() // not essential	{		return (BinaryNode<T>)root.copy();			} // end copyNodes	public T getRootData()	{      T rootData = null;      if (root != null)         rootData = root.getData();             return rootData;	} // end getRootData	public boolean isEmpty()	{      return root == null;	} // end isEmpty	public void clear()	{      root = null;	} // end clear	protected void setRootData(T rootData)	{      root.setData(rootData);	} // end setRootData	protected void setRootNode(BinaryNodeInterface<T> rootNode)	{      root = rootNode;	} // end setRootNode	protected BinaryNodeInterface<T> getRootNode()	{      return root;	} // end getRootNode	public int getHeight()	{      return root.getHeight();	} // end getHeight	public int getNumberOfNodes()	{      return root.getNumberOfNodes();	} // end getNumberOfNodes	public Iterator<T> getPreorderIterator()	{		return new PreorderIterator<T>(root);		} // end getPreorderIterator	public Iterator<T> getInorderIterator()	{		return new InorderIterator<T>(root);		} // end getInorderIterator		public Iterator<T> getPostorderIterator()	{		return new PostorderIterator<T>(root);		} // end getPostorderIterator	public Iterator<T> getLevelOrderIterator()	{		return new LevelOrderIterator<T>(root);		} // end getLevelOrderIterator } // end BinaryTree